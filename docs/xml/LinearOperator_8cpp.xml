<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="LinearOperator_8cpp" kind="file" language="C++">
    <compoundname>LinearOperator.cpp</compoundname>
    <includes refid="LinearOperator_8h" local="yes">LinearOperator.h</includes>
    <includes local="no">doctest/doctest.h</includes>
    <incdepgraph>
      <node id="5">
        <label>pbat/Aliases.h</label>
        <link refid="Aliases_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Eigen/Core</label>
      </node>
      <node id="4">
        <label>exception</label>
      </node>
      <node id="11">
        <label>doctest/doctest.h</label>
      </node>
      <node id="7">
        <label>Eigen/Sparse</label>
      </node>
      <node id="9">
        <label>pbat/profiling/Profiling.h</label>
      </node>
      <node id="10">
        <label>tuple</label>
      </node>
      <node id="1">
        <label>/workspaces/PhysicsBasedAnimationToolkit/source/pbat/math/LinearOperator.cpp</label>
        <link refid="LinearOperator_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cstddef</label>
      </node>
      <node id="3">
        <label>concepts</label>
      </node>
      <node id="2">
        <label>LinearOperator.h</label>
        <link refid="LinearOperator_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structpbat_1_1test_1_1IdentityOperator" prot="public">pbat::test::IdentityOperator</innerclass>
    <innernamespace refid="namespacepbat">pbat</innernamespace>
    <innernamespace refid="namespacepbat_1_1test">pbat::test</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="LinearOperator_8cpp_1af7c0860078d4fcfb672f33a0d3fa0626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;[math] LinearOperator&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot; LinearOperator&quot;</type>
          <array>[math]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/workspaces/PhysicsBasedAnimationToolkit/source/pbat/math/LinearOperator.cpp" line="35" column="1" bodyfile="/workspaces/PhysicsBasedAnimationToolkit/source/pbat/math/LinearOperator.cpp" bodystart="35" bodyend="82"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;LinearOperator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;doctest/doctest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">pbat<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">test<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="structpbat_1_1test_1_1IdentityOperator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpbat_1_1test_1_1IdentityOperator" kindref="compound">IdentityOperator</ref></highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TDerivedIn,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TDerivedOut&gt;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Apply(Eigen::MatrixBase&lt;TDerivedIn&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>x,<sp/>Eigen::DenseBase&lt;TDerivedOut&gt;&amp;<sp/>y)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(x.rows()<sp/>==<sp/>n);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(y.rows()<sp/>==<sp/>n);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(x.cols()<sp/>==<sp/>y.cols());</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>x;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>pbat::CSCMatrix<sp/>ToMatrix()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="20"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pbat::CSCMatrix<sp/>I(n,<sp/>n);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I.setIdentity();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>Index<sp/>OutputDimensions()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;<sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>Index<sp/>InputDimensions()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;<sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>pbat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;[math]<sp/>LinearOperator&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">pbat;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(math::CLinearOperator&lt;test::IdentityOperator&gt;);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/>nOperators<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/>n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/>zero<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1test_1_1IdentityOperator" kindref="compound">test::IdentityOperator</ref><sp/>I{n};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cop<sp/>=<sp/>math::ComposeLinearOperators(I,<sp/>I,<sp/>I);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;n&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>Vector&lt;n&gt;::Ones();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;n&gt;<sp/>y<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Vector&lt;n&gt;::Zero();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>cop.Apply(x,<sp/>y);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;n&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>yExpected<sp/>=<sp/>Vector&lt;n&gt;::Constant(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Scalar</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(nOperators));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>yError<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(yExpected<sp/>-<sp/>y).norm()<sp/>/<sp/>yExpected.norm();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_LE(yError,<sp/>zero);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>LinearOperator<sp/>is<sp/>supposed<sp/>to<sp/>be<sp/>Eigen<sp/>compatible.<sp/>However,<sp/>we<sp/>only<sp/>support<sp/>Eigen<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>operations<sp/>on<sp/>dynamic-size<sp/>vectors/matrices.<sp/>This<sp/>is<sp/>because<sp/>internally,<sp/>Eigen<sp/>uses<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compile-time<sp/>trick<sp/>to<sp/>select</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;n&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xEigenExpected{x};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;n&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>yEigen<sp/><sp/><sp/>=<sp/>cop<sp/>*<sp/>xEigenExpected;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>yEigenError<sp/>=<sp/>(yExpected<sp/>-<sp/>yEigen).norm()<sp/>/<sp/>yExpected.norm();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_LE(yEigenError,<sp/>zero);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CGSolver<sp/>=<sp/>Eigen::ConjugateGradient&lt;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decltype(cop),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Lower<sp/>|<sp/>Eigen::Upper,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::IdentityPreconditioner&gt;;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>CGSolver<sp/>cg;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>cg.compute(cop);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;n&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xEigen<sp/><sp/><sp/>=<sp/>cg.solve(yEigen);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xEigenError<sp/>=<sp/>(xEigenExpected<sp/>-<sp/>xEigen).norm()<sp/>/<sp/>xEigenExpected.norm();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_LE(xEigenError,<sp/>zero);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>CSCMatrix<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cop.ToMatrix();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>CSCMatrix<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I3expected<sp/>=<sp/>3.<sp/>*<sp/>Matrix&lt;n,<sp/>n&gt;::Identity().sparseView();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>matrixError<sp/><sp/><sp/>=<sp/>(I3<sp/>-<sp/>I3expected).squaredNorm();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_LE(matrixError,<sp/>zero);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;n&gt;<sp/>yScaled<sp/>=<sp/>Vector&lt;n&gt;::Zero();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>k<sp/><sp/><sp/><sp/>=<sp/>-2.;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>cop.Apply(k<sp/>*<sp/>x,<sp/>yScaled);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;n&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>yScaledExpected<sp/>=<sp/>Vector&lt;n&gt;::Constant(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Scalar</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(nOperators)<sp/>*<sp/>k);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>yScaledError<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(yScaledExpected<sp/>-<sp/>yScaled).norm()<sp/>/<sp/>yScaledExpected.norm();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_LE(yScaledError,<sp/>zero);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/workspaces/PhysicsBasedAnimationToolkit/source/pbat/math/LinearOperator.cpp"/>
  </compounddef>
</doxygen>
