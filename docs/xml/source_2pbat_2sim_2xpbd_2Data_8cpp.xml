<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="source_2pbat_2sim_2xpbd_2Data_8cpp" kind="file" language="C++">
    <compoundname>Data.cpp</compoundname>
    <includes refid="source_2pbat_2sim_2xpbd_2Data_8h" local="yes">Data.h</includes>
    <includes refid="HyperElasticity_8h" local="yes">pbat/physics/HyperElasticity.h</includes>
    <includes local="no">Eigen/LU</includes>
    <includes local="no">exception</includes>
    <includes local="no">fmt/format.h</includes>
    <includes local="no">string</includes>
    <includes local="no">tbb/parallel_for.h</includes>
    <incdepgraph>
      <node id="2">
        <label>Data.h</label>
        <link refid="source_2pbat_2sim_2xpbd_2Data_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>fmt/format.h</label>
      </node>
      <node id="13">
        <label>Assign.h</label>
        <link refid="Assign_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Eigen/LU</label>
      </node>
      <node id="22">
        <label>cstdint</label>
      </node>
      <node id="20">
        <label>Transpose.h</label>
        <link refid="Transpose_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>pbat/Aliases.h</label>
        <link refid="Aliases_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Eigen/Core</label>
      </node>
      <node id="27">
        <label>string</label>
      </node>
      <node id="11">
        <label>pbat/math/linalg/mini/Matrix.h</label>
        <link refid="Matrix_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>pbat/HostDevice.h</label>
        <link refid="HostDevice_8h_source"/>
      </node>
      <node id="1">
        <label>/workspaces/PhysicsBasedAnimationToolkit/source/pbat/sim/xpbd/Data.cpp</label>
        <link refid="source_2pbat_2sim_2xpbd_2Data_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>exception</label>
      </node>
      <node id="14">
        <label>Concepts.h</label>
        <link refid="math_2linalg_2mini_2Concepts_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>fmt/core.h</label>
      </node>
      <node id="4">
        <label>PhysicsBasedAnimationToolkitExport.h</label>
      </node>
      <node id="30">
        <label>tbb/parallel_for.h</label>
      </node>
      <node id="7">
        <label>Eigen/Sparse</label>
      </node>
      <node id="10">
        <label>pbat/physics/HyperElasticity.h</label>
        <link refid="HyperElasticity_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>string.h</label>
      </node>
      <node id="3">
        <label>Enums.h</label>
        <link refid="sim_2xpbd_2Enums_8h_source"/>
      </node>
      <node id="17">
        <label>utility</label>
      </node>
      <node id="9">
        <label>array</label>
      </node>
      <node id="8">
        <label>cstddef</label>
      </node>
      <node id="12">
        <label>Api.h</label>
        <link refid="Api_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>SubMatrix.h</label>
        <link refid="SubMatrix_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>pbat/common/ConstexprFor.h</label>
        <link refid="ConstexprFor_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>concepts</label>
      </node>
      <node id="16">
        <label>type_traits</label>
      </node>
      <node id="23">
        <label>initializer_list</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacepbat">pbat</innernamespace>
    <innernamespace refid="namespacepbat_1_1sim">pbat::sim</innernamespace>
    <innernamespace refid="namespacepbat_1_1sim_1_1xpbd">pbat::sim::xpbd</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Data.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pbat/physics/HyperElasticity.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/LU&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fmt/format.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tbb/parallel_for.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">pbat<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">sim<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">xpbd<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">Data&amp;<sp/>Data::WithVolumeMesh(</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Ref&lt;MatrixX<sp/>const&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Vin,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Ref&lt;IndexMatrixX<sp/>const&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Ein)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref><sp/><sp/>=<sp/>Vin;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1ac5f54713dd9c158e94ac4ba2d09cdc06" kindref="member">xt</ref><sp/>=<sp/>Vin;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a2491dcc22c501bd670e70dfabe2fd18c" kindref="member">T</ref><sp/><sp/>=<sp/>Ein;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">Data&amp;<sp/>Data::WithSurfaceMesh(</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Ref&lt;IndexVectorX<sp/>const&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Vin,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Ref&lt;IndexMatrixX<sp/>const&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Fin)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a5aa416eee37bbe52d6b315f743c527e8" kindref="member">V</ref><sp/>=<sp/>Vin;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a3bb30340e3f83142274d67e5a38d270d" kindref="member">F</ref><sp/>=<sp/>Fin;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">Data&amp;<sp/>Data::WithBodies(Eigen::Ref&lt;IndexVectorX<sp/>const&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>BVin)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a95aa2ea06f54bc2e9ab4c81b959926bc" kindref="member">BV</ref><sp/>=<sp/>BVin;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">Data&amp;<sp/>Data::WithVelocity(Eigen::Ref&lt;MatrixX<sp/>const&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>vIn)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a7ac0f27e88e9752be2325f8b228c2246" kindref="member">v</ref><sp/>=<sp/>vIn;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">Data&amp;<sp/>Data::WithAcceleration(Eigen::Ref&lt;MatrixX<sp/>const&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>aextIn)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1aafbeba1abbc778e0f599f3360446dc16" kindref="member">aext</ref><sp/>=<sp/>aextIn;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">Data&amp;<sp/>Data::WithMassInverse(Eigen::Ref&lt;VectorX<sp/>const&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>minvIn)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a1ee71d9fb8ea2c65eafd285cf97cd526" kindref="member">minv</ref><sp/>=<sp/>minvIn;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">Data&amp;<sp/>Data::WithElasticMaterial(Eigen::Ref&lt;MatrixX<sp/>const&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lameIn)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a3d80b245c3702bb79791f99792f97dbb" kindref="member">lame</ref><sp/>=<sp/>lameIn;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">Data&amp;<sp/>Data::WithCollisionPenalties(Eigen::Ref&lt;VectorX<sp/>const&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>muVin)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a569dc1cfbb1ab7752bb78b2021e55e65" kindref="member">muV</ref><sp/>=<sp/>muVin;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">Data&amp;<sp/>Data::WithFrictionCoefficients(Scalar<sp/>muSin,<sp/>Scalar<sp/>muDin)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a8cee0775fbac819e171ceefe47cd9875" kindref="member">muS</ref><sp/>=<sp/>muSin;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1af3af44f9a6b77dfb3dc56f641b84bad3" kindref="member">muD</ref><sp/>=<sp/>muDin;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">Data&amp;<sp/>Data::WithDamping(Eigen::Ref&lt;VectorX&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>betaIn,<sp/>EConstraint<sp/>constraint)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a4dba08a8776f7357f9fb126ef2977ca9" kindref="member">beta</ref>[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(constraint)]<sp/>=<sp/>betaIn;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">Data&amp;<sp/>Data::WithCompliance(Eigen::Ref&lt;VectorX&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>alphaIn,<sp/>EConstraint<sp/>constraint)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1ac712fd69fb23ee3b551ec6d189f7fa52" kindref="member">alpha</ref>[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(constraint)]<sp/>=<sp/>alphaIn;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">Data&amp;<sp/>Data::WithPartitions(std::vector&lt;Index&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>PptrIn,<sp/>std::vector&lt;Index&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>PadjIn)</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a5f7f375dda4fd8a74fc10efe60c92db3" kindref="member">Pptr</ref><sp/>=<sp/>PptrIn;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a4bc4b56355a90c7b578562a3637e153b" kindref="member">Padj</ref><sp/>=<sp/>PadjIn;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">Data&amp;<sp/>Data::WithClusterPartitions(</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Index&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>SGptrIn,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Index&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>SGadjIn,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Index&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>CptrIn,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Index&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>CadjIn)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1aaad7636c574132f2861bba6af6fce8ef" kindref="member">SGptr</ref><sp/>=<sp/>SGptrIn;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a0d0af6eefad7d7d46eb343432b6ed615" kindref="member">SGadj</ref><sp/>=<sp/>SGadjIn;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a22462dd2f00c418abd54e2ff6956841a" kindref="member">Cptr</ref><sp/><sp/>=<sp/>CptrIn;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1affd5f09868f8390697cb1d2374419fb4" kindref="member">Cadj</ref><sp/><sp/>=<sp/>CadjIn;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">Data&amp;<sp/>Data::WithDirichletConstrainedVertices(IndexVectorX<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>dbcIn)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1ac84ad222c87b687feda8c85b3ee8bf83" kindref="member">dbc</ref><sp/>=<sp/>dbcIn;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">Data&amp;<sp/>Data::Construct(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bValidate)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>particle<sp/>dynamics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a7ac0f27e88e9752be2325f8b228c2246" kindref="member">v</ref>.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a7ac0f27e88e9752be2325f8b228c2246" kindref="member">v</ref>.setZero(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.rows(),<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.cols());</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1aafbeba1abbc778e0f599f3360446dc16" kindref="member">aext</ref>.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1aafbeba1abbc778e0f599f3360446dc16" kindref="member">aext</ref>.setZero(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.rows(),<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.cols());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1aafbeba1abbc778e0f599f3360446dc16" kindref="member">aext</ref>.bottomRows(1).setConstant(Scalar(-9.81));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a1ee71d9fb8ea2c65eafd285cf97cd526" kindref="member">minv</ref>.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a1ee71d9fb8ea2c65eafd285cf97cd526" kindref="member">minv</ref>.setConstant(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.cols(),<sp/>Scalar(1e-3));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a95aa2ea06f54bc2e9ab4c81b959926bc" kindref="member">BV</ref>.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a95aa2ea06f54bc2e9ab4c81b959926bc" kindref="member">BV</ref>.setZero(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.cols());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a2cd9e1c29eb0c96792f980b21cef4e30" kindref="member">xb</ref><sp/>=<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enforce<sp/>Dirichlet<sp/>boundary<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a1ee71d9fb8ea2c65eafd285cf97cd526" kindref="member">minv</ref>(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1ac84ad222c87b687feda8c85b3ee8bf83" kindref="member">dbc</ref>).setZero();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a7ac0f27e88e9752be2325f8b228c2246" kindref="member">v</ref>(Eigen::placeholders::all,<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1ac84ad222c87b687feda8c85b3ee8bf83" kindref="member">dbc</ref>).setZero();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1aafbeba1abbc778e0f599f3360446dc16" kindref="member">aext</ref>(Eigen::placeholders::all,<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1ac84ad222c87b687feda8c85b3ee8bf83" kindref="member">dbc</ref>).setZero();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>elastic<sp/>material<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a3d80b245c3702bb79791f99792f97dbb" kindref="member">lame</ref>.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a3d80b245c3702bb79791f99792f97dbb" kindref="member">lame</ref>.setZero(2,<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a2491dcc22c501bd670e70dfabe2fd18c" kindref="member">T</ref>.cols());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>[lmu,<sp/>llambda]<sp/>=<sp/>physics::LameCoefficients(Scalar(1e6),<sp/>Scalar(0.45));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a3d80b245c3702bb79791f99792f97dbb" kindref="member">lame</ref>.row(0).setConstant(lmu);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a3d80b245c3702bb79791f99792f97dbb" kindref="member">lame</ref>.row(1).setConstant(llambda);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1ae8a0cbe70c0f47658d0d9d7eac2bd17e" kindref="member">DmInv</ref>.resize(3,<sp/>3<sp/>*<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a2491dcc22c501bd670e70dfabe2fd18c" kindref="member">T</ref>.cols());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>snhConstraintId<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EConstraint::StableNeoHookean);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1ac712fd69fb23ee3b551ec6d189f7fa52" kindref="member">alpha</ref>[snhConstraintId].resize(2<sp/>*<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a2491dcc22c501bd670e70dfabe2fd18c" kindref="member">T</ref>.cols());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a335f7a2d79745c02010b4914d573bc85" kindref="member">gammaSNH</ref>.resize(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a2491dcc22c501bd670e70dfabe2fd18c" kindref="member">T</ref>.cols());</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>tbb::parallel_for(Index(0),<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a2491dcc22c501bd670e70dfabe2fd18c" kindref="member">T</ref>.cols(),<sp/>[&amp;](Index<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>vertex<sp/>positions<sp/>of<sp/>element<sp/>c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexVector&lt;4&gt;<sp/>v<sp/>=<sp/>T.col(t);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;3,<sp/>4&gt;<sp/>xc<sp/><sp/>=<sp/>x(Eigen::placeholders::all,<sp/>v);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>shape<sp/>matrix<sp/>and<sp/>its<sp/>inverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;3,<sp/>3&gt;<sp/>Ds<sp/>=<sp/>xc.block&lt;3,<sp/>3&gt;(0,<sp/>1).colwise()<sp/>-<sp/>xc.col(0);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>DmInvC<sp/><sp/><sp/><sp/><sp/>=<sp/>DmInv.block&lt;3,<sp/>3&gt;(0,<sp/>t<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DmInvC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Ds.inverse();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>constraint<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>const<sp/>tetVolume<sp/>=<sp/>Ds.determinant()<sp/>/<sp/>Scalar(6);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>alphat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>alpha[snhConstraintId].segment&lt;2&gt;(2<sp/>*<sp/>t);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>lamet<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>lame.col(t).segment&lt;2&gt;(0);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alphat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Scalar(1)<sp/>/<sp/>(lamet<sp/>*<sp/>tetVolume).array();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>rest<sp/>stability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gammaSNH(t)<sp/>=<sp/>Scalar(1)<sp/>+<sp/>lamet(0)<sp/>/<sp/>lamet(1);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a4dba08a8776f7357f9fb126ef2977ca9" kindref="member">beta</ref>[snhConstraintId].size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a4dba08a8776f7357f9fb126ef2977ca9" kindref="member">beta</ref>[snhConstraintId].setZero(2<sp/>*<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a2491dcc22c501bd670e70dfabe2fd18c" kindref="member">T</ref>.cols());</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a4b51063769fd9d1fa93ec66bca426a12" kindref="member">lambda</ref>[snhConstraintId].setZero(2<sp/>*<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a2491dcc22c501bd670e70dfabe2fd18c" kindref="member">T</ref>.cols());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>contact<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>collisionConstraintId<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EConstraint::Collision);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1ac712fd69fb23ee3b551ec6d189f7fa52" kindref="member">alpha</ref>[collisionConstraintId].size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1ac712fd69fb23ee3b551ec6d189f7fa52" kindref="member">alpha</ref>[collisionConstraintId].setConstant(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a5aa416eee37bbe52d6b315f743c527e8" kindref="member">V</ref>.size(),<sp/>Scalar(0));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a4dba08a8776f7357f9fb126ef2977ca9" kindref="member">beta</ref>[collisionConstraintId].size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a4dba08a8776f7357f9fb126ef2977ca9" kindref="member">beta</ref>[collisionConstraintId].setConstant(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a5aa416eee37bbe52d6b315f743c527e8" kindref="member">V</ref>.size(),<sp/>Scalar(0));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a4b51063769fd9d1fa93ec66bca426a12" kindref="member">lambda</ref>[collisionConstraintId].setZero(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a5aa416eee37bbe52d6b315f743c527e8" kindref="member">V</ref>.size());</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a569dc1cfbb1ab7752bb78b2021e55e65" kindref="member">muV</ref>.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a569dc1cfbb1ab7752bb78b2021e55e65" kindref="member">muV</ref>.setOnes(<ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a5aa416eee37bbe52d6b315f743c527e8" kindref="member">V</ref>.size());</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Throw<sp/>error<sp/>if<sp/>ill-formed<sp/>Data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bValidate)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bPerParticleQuantityDimensionsValid<sp/>=<sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.cols()<sp/>==<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1ac5f54713dd9c158e94ac4ba2d09cdc06" kindref="member">xt</ref>.cols()<sp/>and</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.cols()<sp/>==<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a7ac0f27e88e9752be2325f8b228c2246" kindref="member">v</ref>.cols()<sp/>and</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.cols()<sp/>==<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1aafbeba1abbc778e0f599f3360446dc16" kindref="member">aext</ref>.cols()<sp/>and</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.cols()<sp/>==<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a1ee71d9fb8ea2c65eafd285cf97cd526" kindref="member">minv</ref>.size()<sp/>and<sp/></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.rows()<sp/>==<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1ac5f54713dd9c158e94ac4ba2d09cdc06" kindref="member">xt</ref>.rows()<sp/>and</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.rows()<sp/>==<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a7ac0f27e88e9752be2325f8b228c2246" kindref="member">v</ref>.rows()<sp/>and</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.rows()<sp/>==<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1aafbeba1abbc778e0f599f3360446dc16" kindref="member">aext</ref>.rows()<sp/>and</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.rows()<sp/>==<sp/>3;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>bPerParticleQuantityDimensionsValid)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>what<sp/>=<sp/>fmt::format(</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;x,<sp/>v,<sp/>aext<sp/>and<sp/>m<sp/>must<sp/>have<sp/>same<sp/>#columns={}<sp/>as<sp/>x,<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;3<sp/>rows<sp/>(except<sp/>m)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.cols());</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(what);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bElementDimensionsValid<sp/>=<sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a2491dcc22c501bd670e70dfabe2fd18c" kindref="member">T</ref>.rows()<sp/><sp/><sp/><sp/>==<sp/>4<sp/>and<sp/></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a3d80b245c3702bb79791f99792f97dbb" kindref="member">lame</ref>.rows()<sp/>==<sp/>2<sp/>and<sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a3d80b245c3702bb79791f99792f97dbb" kindref="member">lame</ref>.cols()<sp/>==<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a2491dcc22c501bd670e70dfabe2fd18c" kindref="member">T</ref>.cols();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>bElementDimensionsValid)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>what<sp/>=<sp/>fmt::format(</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;With<sp/>#elements={0},<sp/>expected<sp/>T=4x{0},<sp/>lame=2x{0}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a2491dcc22c501bd670e70dfabe2fd18c" kindref="member">T</ref>.cols(),</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a2491dcc22c501bd670e70dfabe2fd18c" kindref="member">T</ref>.cols()<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(what);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMultibodyContactSystemValid<sp/>=<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a95aa2ea06f54bc2e9ab4c81b959926bc" kindref="member">BV</ref>.size()<sp/>==<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.cols()<sp/>and<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a569dc1cfbb1ab7752bb78b2021e55e65" kindref="member">muV</ref>.size()<sp/>==<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a5aa416eee37bbe52d6b315f743c527e8" kindref="member">V</ref>.size();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>bMultibodyContactSystemValid)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>what<sp/>=</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;Expected<sp/>BV.size()={0},<sp/>muV.size()={1}&quot;</highlight><highlight class="normal">,<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a902c4a34b00ced9a46301747997cb9a8" kindref="member">x</ref>.cols(),<sp/><ref refid="structpbat_1_1sim_1_1xpbd_1_1Data_1a5aa416eee37bbe52d6b315f743c527e8" kindref="member">V</ref>.size());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(what);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>xpbd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>sim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>pbat</highlight></codeline>
    </programlisting>
    <location file="/workspaces/PhysicsBasedAnimationToolkit/source/pbat/sim/xpbd/Data.cpp"/>
  </compounddef>
</doxygen>
