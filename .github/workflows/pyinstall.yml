name: build

on:
  pull_request: 
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    name: Local pip installation on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: ubuntu-24.04
          #   build_tool_args: -j4
          #   preset: ci-pip-cuda
          #   sub_packages: '[]'
          #   non_cuda_sub_packages: '[]'
            # sub_packages: '["nvcc", "cudart", "thrust"]'
            # non-cuda-sub-packages: '["cublas"]'
          - os: windows-2022
            build_tool_args: /p:CL_MPCount=4
            preset: ci-pip-cuda
            sub_packages: '[]'
            non_cuda_sub_packages: '[]'
            # sub_packages: '["nvcc", "cudart", "thrust", "visual_studio_integration"]'
            # non-cuda-sub-packages: '["cublas"]'
          # - os: macos-13
          #   preset: pip
          #   build_tool_args: -j4
          # - os: macos-14
          #   preset: pip
          #   build_tool_args: -j4
      max-parallel: 4

    steps:
      - uses: actions/checkout@v4

      - uses: Jimver/cuda-toolkit@v0.2.24
        id: cuda-toolkit
        if: ${{ !startsWith(matrix.os, 'macos') }}
        with:
          cuda: '12.8.0'
          method: 'network'
          sub-packages: ${{ matrix.sub_packages }}
          non-cuda-sub-packages: ${{ matrix.non_cuda_sub_packages }}

      # Display CUDA installation layout
      # - if: ${{ !startsWith(matrix.os, 'macos') }}
      #   run: |
      #     echo "Cuda install location ${{ steps.cuda-toolkit.outputs.CUDA_PATH }}"

      # - if: ${{ !startsWith(matrix.os, 'macos') }}
      #   run: | 
      #     ls "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/bin"

      # - if: ${{ startsWith(matrix.os, 'ubuntu') }}
      #   run: |
      #     ls "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/lib64"

      # - if: ${{ startsWith(matrix.os, 'windows') }}
      #   run: |
      #     ls "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/extras/CUPTI/lib64"

      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "4.0.1"

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{ github.workspace }}/vcpkg
          vcpkgGitCommitId: b02e341c927f16d991edbd915d8ea43eac52096c

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Build and install PBAT Python bindings
        run: |
          pip install . --config-settings cmake.args="--preset=${{ matrix.preset }}" --config-settings build.targets="PhysicsBasedAnimationToolkit_PythonStub" --config-settings build.tool-args="${{ matrix.build_tool_args }}" -v

      - name: Verify DLL resolution
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          ls "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.44.35207/bin/Hostx64/x64"
          cd ${{ github.workspace }}/build/cp312-cp312-win_amd64/lib/Release
          $env:PATH += ";C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.44.35207/bin/Hostx64/x64"
          $env:Path += ";C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.44.35207/bin/Hostx64/x64"          
          $env:PATH += ";${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/bin"
          $env:PATH += ";${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/extras/CUPTI/lib64"
          $env:Path += ";${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/bin"
          $env:Path += ";${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/extras/CUPTI/lib64"
          echo $env:PATH
          echo $env:Path
          dumpbin.exe /IMPORTS _pbat.cp312-win_amd64.pyd | Select-String -Pattern "^[ ]+[A-Za-z0-9_.-]+\.dll" | Sort-Object -Unique

